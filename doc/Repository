* 
* Repository
*
* @author: Kai Kühn / ontoprise / 2010
*

#
# 1. Repository architecture.
#

The deploy framework repository is a HTTP accessible endpoint of the following structure:

    (1) A respository.xml file
    (2) A extensions directory containing a subdirectory for every deployable entity 
        The directory is named with the ID of the extension. The directory contains all available
        deploy descriptors named after the following schema: deploy-<ver>.xml where <ver> is a 
        3-digit version number. It also contains a file deploy.xml pointing to the latest deploy
        descriptor, ie. the one with the highest version number.
        
 example:

    - repository.xml
    - extensions 
     | 
     |-smwhalo
       |
       |- deploy-130.xml
       |- deploy-140.xml
       |- deploy.xml
     |-smw
     |-haloacl
     
     

The repository may use HTTP Basic Authentication for access restriction.

Repository.xml format:

    <root>
        <extensions>
            <extension id="extension>
                <version ver="130" patchlevel="3" url="http://..."/>
                <version ver="140" patchlevel="2" url="http://..."/>
            </extension>
        </extensions>
    <root>    
    
Each extension has its own <extension> node. For each version there is one version node below containg the 
version number and the patchlevel. The url attribute specifies where the bundle can be downloaded. Any 
HTTP location is possible.

Version numbers are always 3-digit numbers, patchlevels is an integer number >= 0. A missing patchlevel
attribute is interpreted as 0.


#
# 2. Repository setup .
#

Before you make a new repository, you should setup a new branch and do an inital checkout. The change into

    $project-dir/deployment/tools/maintenance

Make sure you have superuser access.
    
Run the script: 

    php createRepository.php -o <repository location> -r <release num>
    
It creates the file <repository location>/repository.xml. If you create the repository from head,
replace the option -r <release num> by --head. The <release num> is a 3-digit number, like 151.

Then run the script:

    php extractDD.php -o <repository location>/extensions --latest
    
It creates copies of the deployment descriptors for each extension in a separate folder. It also creates a link to
the latest version in each subdirectory.

Your repository is now accessible (if the repository dir is accessible by HTTP of course).

#
# 3. Build automatically during build
#

You should create the repository during each build to reflect all changes in the deploy descriptors.
Use this snippet. Just replace the <release num> by, for example, 151 for version 1.5.1

#!/bin/sh -x

#Write deploy descriptors
cd $WORKSPACE/SMWHaloTrunk/deployment/tools/maintenance
php extractDD.php -o /root/nightly_repository/extensions --latest

#(Re-)create repository.xml
php createRepository.php -o /root/nightly_repository -r <release num>
   